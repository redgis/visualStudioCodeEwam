{
    /*
	 // Place your snippets for JavaScript here. Each snippet is defined under a snippet name and has a prefix, body and 
	 // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	 // $1, $2 for tab stops, ${id} and ${id:label} and ${1:label} for variables. Variables with the same id are connected.
	 // Example:
	 "Print to console": {
		"prefix": "log",
		"body": [
			"console.log('$1');",
			"$2"
		],
		"description": "Log output to console"
	}
*/
    "if else": {
        "prefix": "if else",
        "body": [
            "if ${1:condition}",
            "  ${2:content1}",
            "else",
            "  ${3:content2}",
            "endIf"
        ],
        "description": "if [condition] ... else ... endIf"
    },
    "if": {
        "prefix": "if",
        "body": [
            "if ${1:condition}",
            "  ${2:content}",
            "endIf"
        ],
        "description": "if [condition] ... endIf"
    },
    "if elseif else": {
        "prefix": "if elseif else",
        "body": [
            "if ${1:condition1}",
            "  ${3:content1}",
            "elseif ${2:condition2}",
            "  ${3:content2}",
            "else",
            "  ${4:content3}",
            "endIf"
        ],
        "description": "if [condition] ... elseif [condition] ... else ... endIf"
    },
    "else": {
        "prefix": "else",
        "body": [
            "else",
            "  ${1:content}"
        ],
        "description": "else ..."
    },
    "elseif": {
        "prefix": "elseif",
        "body": [
            "elseif ${1:condition}",
            "  ${2:content}"
        ],
        "description": "elseif [condition] ..."
    },
    "foreach": {
        "prefix": "foreach",
        "body": [
            "foreach ${1:object} in ${2:list} ",
            "  ${3:content}",
            "endFor"
        ],
        "description": "foreach [item] in [list] ... endFor"
    },
    "repeat until": {
        "prefix": "repeat until",
        "body": [
            "repeat",
            "   ${2:content}",
            "until ${1:condition}"
        ],
        "description": "repeat ... until [condition]"
    },
    "while": {
        "prefix": "while",
        "body": [
            "while ${1:condition}",
            "   ${2:content}",
            "endWhile"
        ],
        "description": "while [condition] ... endWhile"
    },
    "refto": {
        "prefix": "refto",
        "body": [
            "[model(Text:''),",
            "   type:model(",
            "         Text:'${0:description}',", 
            "         StillsOnFreeze:true,",
            "         FreezeRefObject:false,",
            "         StoreExtract:false,",
            "         ExtractKind:FullExtract,",
            "         ExtractParam:0,",
            "         ExtractMaxSize:0,",
            "         SingleRole:(",
            "            Text:'',",
            "            WhatCanIDo:(CanConsult:true,CanModif:true,CanCreate:true,CanSearch:true,",
            "               CanDelete:true,CanReceive:false,NoFinal:true,PickOldVersion:false,ByPassSelection:false,",
            "               DBRefreshOnConsult:false),",
            "            AcceptDescendant:true,",
            "            CreateDescendants:false,",
            "            OnlyDescendants:false,",
            "            InChargeOfDeletingBackRef:true,",
            "            RoleClass:'',",
            "            ConsultScenario:'',",
            "            CreateScenario:'',",
            "            ModifyScenario:'',",
            "            PickerClass:'',",
            "            PickerScenario:''",
            "         ),",
            "         MultiRole:null",
            "      )]",
            "${name:refObj} : RefTo [${modifiers:P,A}] ${class:aFullObject} inverse ${backRef:myOwner} multiLang"
        ],
        "description": "[variable] : refto [modifiers] [class] inverse [backref]"
    },
    "refto Owner": {
        "prefix": "refto owner",
        "body": [
            "[model(Text:'${0:description}')]",
            "[type:model(SingleRole:(WhatCanIDo:(CanSearch:false),RoleClass:'aSingleRoleType'))]",
            "${name:refObj} : RefTo [O] ${class:aFullObject} inverse myOwner multiLang"
        ],
        "description": "[variable] : refto [O] [class] inverse myOwner"
    },
    "refto PA": {
        "prefix": "refto PA",
        "body": [
            "[model(Text:'${0:description}')]",
            "[type:model(SingleRole:(WhatCanIDo:(CanModif:false,CanCreate:false),RoleClass:'aSingleRoleType'))]",
            "${name:refObj} : RefTo [P,A] ${class:aFullObject} multiLang"
        ],
        "description": "[variable] : refto [P,A] [class] inverse [backref]"
    },
    "listOf": {
        "prefix": "listOf",
        "body": [
            "[model(Text:'${0:description}')]",
            "[type:model(SingleRole:(WhatCanIDo:(CanModif:false,CanCreate:false),RoleClass:'aSingleRoleType'))]",
            "${name:refObj} : listOf [${modifiers:P,A}] ${class:aFullObject} inverse ${backRef:myOwner} multiLang"
        ],
        "description": "[variable] : listOf [modifiers] [class] inverse [backref]"
    },
    "listOf PA": {
        "prefix": "listOf PA",
        "body": [
            "[model(Text:'${0:description}')]",
            "[type:model(SingleRole:(WhatCanIDo:(CanModif:false,CanCreate:false),RoleClass:'aSingleRoleType'))]",
            "${name:refObj} : ListOf [P,A] ${class:aFullObject} multiLang"
        ],
        "description": "[variable] : listOf [P,A] [class]"
    },
    "listOf Owner": {
        "prefix": "listOf Owner",
        "body": [
            "[model(Text:'${0:description}')]",
            "[type:model(SingleRole:(WhatCanIDo:(CanModif:false,CanCreate:false),RoleClass:'aSingleRoleType'))]",
            "${name:refObj} : ListOf [O] ${class:aFullObject} multiLang"
        ],
        "description": "[variable] : listOf [O] [class] inverse myOwner"
    },
    "type enum": {
        "prefix": "type enum",
        "body": [
            "type ${1:enumName} : (",
            "    [model(Text:'${2:value name}')] ${3:cValue1},",
            "    [model(Text:'${4:value name}')] ${5:cValue2},",
            "    [model(Text:'${6:value name}')] ${7:cValue3},",
            ")"
        ],
        "description": "type [enumName] : ( ... )"
    },
    "type record": {
        "prefix": "type record",
        "body": [
            "type ${1:tRecordTypeName} : record",
            "    ${2:field1} : ${3:fieldtype1}",
            "    ${4:field2} : ${5:fieldtype2}",
            "endRecord"
        ],
        "description": "type [recordName] record ... endRecord"
    },
    "type record override": {
        "prefix": "type record override",
        "body": [
            "type ${1:tRecordTypeName} : record(${2:overrideRecord})",
            "    ${3:field1} : ${4:fieldtype1}",
            "    ${5:field2} : ${6:fieldtype2}",
            "endRecord"
        ],
        "description": "type [recordName] record ... endRecord"
    },
    "type sequence": {
        "prefix": "type sequence",
        "body": [
            "type ${1:tSequenceTypeName} : sequence of ${2:sequenceItemType}"
        ],
        "description": "type [sequenceName] : sequence of [itemType]"
    },
    "procedure": {
        "prefix": "proc",
        "body": [
            "procedure ${1:procname}(${2:param1} : ${2:paramtype1}, ${4:param2} : ${5:paramtype2}, ...)",
            "   ${6:content}",
            "endProc"
        ],
        "description": "procedure [procName] ( ... ) ... endProc"
    },
    "fucntion": {
        "prefix": "func",
        "body": [
            "function ${1:funcname}(${2:param1} : ${3:paramtype1}, ${4:param2} : ${5:paramtype2}, ...) return ${6:returntype}",
            "   ${7:content}",
            "endFunc"
        ],
        "description": "function [funcName] ( ... ) return [returnType] ... endFunc"
    },
    "var": {
        "prefix": "var",
        "body": [
            "var ${1:varName} : ${2:varType}"
        ],
        "description": "function [funcName] ( ... ) return [returnType] ... endFunc"
    }
}