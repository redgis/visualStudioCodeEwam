{
    /*
	 // Place your snippets for JavaScript here. Each snippet is defined under a snippet name and has a prefix, body and 
	 // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	 // $1, $2 for tab stops, ${id} and ${id:label} and ${1:label} for variables. Variables with the same id are connected.
	 // Example:
	 "Print to console": {
		"prefix": "log",
		"body": [
			"console.log('$1');",
			"$2"
		],
		"description": "Log output to console"
	}
*/
    "If-else-elseif-endif": {
        "prefix": "if",
        "body": [
            "if ${condition}",
            "  ${content}",
            "elseif ${condition}",
            "  ${content}",
            "else",
            "  ${content}",
            "endIf"
        ],
        "description": "Foreach loop"
    },
    "For Loop": {
        "prefix": "foreach",
        "body": [
            "foreach ${object} in ${list} ",
            "  ${content}",
            "endFor"
        ],
        "description": "Foreach loop"
    },
    "RefToO": {
        "prefix": "refto O",
        "body": [
            "[model(Text:'${name}')]",
            "[type:model(SingleRole:(WhatCanIDo:(CanModif:false,CanCreate:false),RoleClass:'aSingleRoleType'))]",
            "${name} : RefTo[O] ${target} inverse myOwner multiLang"
        ],
        "description": "RefTo Owner"
    },
    "RefToPA": {
        "prefix": "refto PA",
        "body": [
            "[model(Text:'${name}')]",
            "[type:model(SingleRole:(WhatCanIDo:(CanModif:false,CanCreate:false),RoleClass:'aSingleRoleType'))]",
            "${name} : RefTo[P,A] ${target} multiLang"
        ],
        "description": "RefTo PA"
    },
    "ListOfPA": {
        "prefix": "listOf PA",
        "body": [
            "[model(Text:'${name}')]",
            "[type:model(SingleRole:(WhatCanIDo:(CanModif:false,CanCreate:false),RoleClass:'aSingleRoleType'))]",
            "${name} : ListOf [P,A] ${target} multiLang"
        ],
        "description": "ListOf PA"
    },
    "StringExtract": {
        "prefix": "StringExtract()",
        "body": [
            "function StringExtract(Kind : tExtractKind, Param : Int1, MaxSize : Int4) return CString override",
            "  _Result = inherited self.StringExtract(Kind, Param, MaxSize)",
            "end"
        ],
        "description": "String Extract"
    }
}